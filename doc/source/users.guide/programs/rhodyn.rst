.. index::
   single: Program; Rhodyn
   single: Rhodyn

.. _UG\:sec\:rhodyn:

:program:`rhodyn`
==================

.. only:: html

  .. contents::
     :local:
     :backlinks: none

.. xmldoc:: <MODULE NAME="RHODYN">
            %%Description:
            <HELP>
            The program RHODYN is used for the density matrix based 
            time-dependent configuration interaction (:math:`\rho`-TDCI) 
            calculations.
            </HELP>


The program :program:`RHODYN` is used for the density matrix based time-dependent 
configuration interaction (:math:`\rho`-TDCI) calculations.
The dynamics of a system initiated by electromagnetic pulse can be obtained 
by means of density matrix propagation with :program:`RASSI` hamiltonian :cite:`Malmqvist:89`.
Field is included in dipole approximation :math:`H_{int} = - \vec{d} \cdot \vec{E}`.
The feature of the method is the treating core states and valence states 
on the same footing if Hamiltonian is chosen properly.
Core states dynamics are even more adequate to calculate in the framework 
of TDCI since its timing is quite fast (fs) that isolates 
electron dynamics from nuclear effects.
Nonetheless, such effects as nuclear bath, ionization, and Auger decay 
can be taken into account (see keywords).
Output of the program:

.. container:: list

  **Populations of basis states**
  Configuration state functions, Spin-free, Spin-Orbit coupling states

  **Evolution of dipole moment in time**
  The value of observable can be accessed as :math:`<\vec{d}> = Tr[\rho \vec{d}]`.
  If requested it is written to file :file:`DIPOLE.dat`

  **Linear and non-linear spectra**
  TD absorption, emission spectra

.. seealso:: Auger decay in keywords



.. _UG\:sec\:rhodyn_dependencies:

Dependencies
------------

The program workflow requires some input files to be present with wave function 
specifications from :program:`RASSCF` and their properties from 
:program:`RASSI`.

.. _UG\:sec\:rhodyn_files:

Files
-----

The naming convention is the same as adopted throughout |openmolcas|.
In the input file the system file name should be linked to a standard
name declared in translation table. These standard names are listed 
below.

.. _UG\:sec\:rhodyn_inp_files:

Input files
...........

.. class:: filelist

:file:`RASSDX`
  hdf5 file generated by :program:`RASSF` or :program:`CASPT2`. :variable:`X` stands for
  number of file (currently up to 6, so 6 different spin multiplicities can be
  taken into account). Number of files should be equal to
  number of spin manifolds stated with keyword :kword:`NRSM`.

:file:`RASSISD`
  :program:`RASSI` output file in hdf5 format, calculated on given 
  :program:`RASSF` files. It should contain also additional sets in hdf5 
  to standard ones, which can be written with keyword RHODyn in 
  :program:`RASSI`.

:file:`HRFACT`
  File with Huang-Ruyis factors. If keyword :kword:`KEXT` is active 
  then this file has to contain dissipation rate :variable:`k` matrix.

:file:`INDENS`
  File with initial density matrix. When keyword :kword:`POPU`lation style set to "``FROMFILE``",
  then this file should be present.

.. _UG\:sec\:rhodyn_output_files:

Output files
............

.. class:: filelist

:file:`PULSE`
  Stores the applied electric field. Duplicate in file :file:`RDOUT`.

:file:`CSFDEN`
  this file is for the diagonal density matrix in CSF basis.

:file:`SFDENS`
  this file is for the diagonal density matrix in SF basis.

:file:`SODENS`
  this file is for the diagonal density matrix in SO basis

:file:`RDPREP`
  Intermediate file in hdf5 format which automatically created
  and contains all required ingridients for propagation: transformation
  matrices from one basis to another, full and spin-orbit coupling
  Hamiltonians, transition dipole matrix, initial density matrix, and
  Dyson amplitudes. Once created this file can be used as an input file
  with keyword :kword:`PREP` set to 2.

:file:`RDOUT`
  Main output file. Here almost everything interesting is stored in
  hdf5 format. By far, it includes the electric field data, Hamiltonian
  used for propagation, decay matrix. Optionally, full density matrix
  and emission spectra can be written. 

:file:`DIPOLE.dat`
  this file is for the TD-dipole moment data

.. _UG\:sec\:rhodyn_inp:

Input
-----

General keywords
................

.. class:: keywordlist

:kword:`NRSManifolds`
  Number of spin manifolds :variable:`n`

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="NRSM" APPEAR="Spin manifolds" KIND="INT" LEVEL="BASIC">
              %%Keyword: NRSManifolds <basic>
              <HELP>
              Number of spin manifolds
              </HELP>
              </KEYWORD>

:kword:`NSTAte`
  Total number of the states involved in dynamics followed by their counting. 
  If all states from input files are supposed to be used then required word "``ALL``".

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="NSTA" APPEAR="Number of states" KIND="CUSTOM" LEVEL="BASIC">
              %%Keyword: DTime <advanced>
              <HELP>
              Total number of the states involved in dynamics
              </HELP>
              </KEYWORD>

:kword:`NRDEt,CSF,STATES,SPIN`
  Here should be *n* lines, each with four numbers:
  number of determinants, number of CSFs, number of roots, and spin multiplicity for each spin manifold.
  See examples below.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="NRDE" APPEAR="Determinants, CSFs, roots, and spin" KIND="CUSTOM" LEVEL="BASIC">
              %%Keyword: DTime <advanced>
              <HELP>
              Defines number of determinants, CSFs, roots, and spin multiplicity for each manifold.
              </HELP>
              </KEYWORD>

:kword:`POPUlation style`
  State basis to be populated. Available options: ``CSF``, ``SF``, ``SF_THERMAL``, ``SO``, ``SO_THERMAL``,
  ``FROMFILE``.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="POPU" APPEAR="State basis to be populated." KIND="CUSTOM" LEVEL="BASIC">
              %%Keyword: DTime <advanced>
              <HELP>
              State basis to be populated.
              </HELP>
              </KEYWORD>

:kword:`NRPO`
  Numbers of states to be populated.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="NRPO" APPEAR="Populated states" KIND="INT" LEVEL="BASIC" DEFAULT_VALUE="1" MIN_VALUE="0">
              %%Keyword: NRPO <advanced>
              <HELP>
              Number of states to be populated.
              </HELP>
              </KEYWORD>

:kword:`TEMPerature`
  Temperature in K, which is used with thermal population option.
  Default is set to 300.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="TEMP" APPEAR="Temperature" KIND="REAL" LEVEL="BASIC" DEFAULT_VALUE="300.0" MIN_VALUE="0.0">
              %%Keyword: TEMPerature <advanced>
              <HELP>
              Defines the temperature for initial state population.
              </HELP>
              </KEYWORD>

:kword:`IFSO`
  Flag to include spin-orbit coupling. It is off by default.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="IFSO" APPEAR="Enable spin-orbit coupling" KIND="SINGLE" LEVEL="BASIC">
              %%Keyword: IFSO <advanced>
              <HELP>
              Flag to include spin-orbit coupling.
              </HELP>
              </KEYWORD>

:kword:`PREParation`
  Integer key governing the course of the program:

  .. container:: list

    **1** --- start from rasscf/rassi input to propagation (default);

    **2** --- start with preparation file to propagation;

    **3** --- create just preparation file without propagation;

    **4** --- charge migration case

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="PREP" APPEAR="Preparation" KIND="CHOICE" LIST="1: Conventional, 2: From prep file, 3: No dynamics, 4: Test" LEVEL="BASIC" DEFAULT_VALUE="1">
              %%Keyword: PREParation <advanced>
              <HELP>
              Switcher to define what part of program runs.
              </HELP>
              </KEYWORD>

:kword:`INITial time`
  Time when propagation starts in fs. 0 by default

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="INIT" APPEAR="Initial time" KIND="REAL" LEVEL="BASIC" DEFAULT_VALUE="0.0" MIN_VALUE="0.0">
              %%Keyword: INITial time <advanced>
              <HELP>
              Time when propagation starts.
              </HELP>
              </KEYWORD>

:kword:`FINAltime`
  Time when propagation ends in fs. 10 by default.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="FINA" APPEAR="Final time in fs" KIND="REAL" LEVEL="BASIC" DEFAULT_VALUE="10.0" MIN_VALUE="0.0">
              %%Keyword: FINAltime <advanced>
              <HELP>
              Final time of the propagation.
              </HELP>
              </KEYWORD>

:kword:`TSTEp`
  Time step of integration in fs. Used only with fixed time step methods. 0.0005 by default.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="TSTE" APPEAR="Time step" KIND="REAL" LEVEL="BASIC" DEFAULT_VALUE="0.0005" MIN_VALUE="0.0">
              %%Keyword: TSTEp <advanced>
              <HELP>
              Time step of integration in fs.
              </HELP>
              </KEYWORD>

:kword:`METHod`
  Method of integration: Runge-Kutta method of 4th order (``classic_RK4``) is set by default. ``RKCK`` (Runge-Kutta-Cash-Karp) 
  with variable time step sometimes is better. Other available integrators are
  ``RK4``, ``RK5``, ``RK45``.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="METH" APPEAR="Method of integration" KIND="CUSTOM" LEVEL="BASIC">
              %%Keyword: DTime <advanced>
              <HELP>
              Method of integration.
              </HELP>
              </KEYWORD>

:kword:`RK45`
  Error threshold for the integration methods with changing step. :math:`10^{-6}` by default. 

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="RK45" APPEAR="Error threshold" KIND="REAL" LEVEL="BASIC" DEFAULT_VALUE="1e-6" MIN_VALUE="0.0">
              %%Keyword: RK45 <advanced>
              <HELP>
              Error threshold for the integration methods with changing step.
              </HELP>
              </KEYWORD>

:kword:`RKSAfety`
  Safety parameter to estimate error on each step for methods with 
  adaptive step size. The calculated next step size is multiplied by 
  the value of safety. It is set to 0.9. Increase it to get faster
  integration but at the price of safety. 

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="RKSA" APPEAR="Safety parameter" KIND="REAL" LEVEL="BASIC" DEFAULT_VALUE="0.9" MIN_VALUE="0.0">
              %%Keyword: RKSAfety <advanced>
              <HELP>
              Safety parameter
              </HELP>
              </KEYWORD>
  
:kword:`TOUT`
  Time interval of writing populations and of discretizing field. Used only with fixed time step methods. 0.05 by default.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="TOUT" APPEAR="Output time step" KIND="REAL" LEVEL="BASIC" DEFAULT_VALUE="0.05" MIN_VALUE="0.0">
              %%Keyword: TOUT <advanced>
              <HELP>
              Time interval of writing populations and of discretizing field.
              </HELP>
              </KEYWORD>

:kword:`PROPbasis`
  Basis used for propagation, spin-free basis by default. For some features such as dipole moment calc or emission SO basis 
  is preferrable. Available options: ``CSF``, ``SF``, ``SO``.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="PROP" APPEAR="Propagation basis" KIND="CUSTOM" LEVEL="BASIC">
              %%Keyword: PROPbasis <advanced>
              <HELP>
              Basis used for propagation.
              </HELP>
              </KEYWORD>

:kword:`DMBAsis`
  Basis used for the output of density matrix diagonal elements (populations), ``SF_SO`` by default means that density matrix
  is printed in two basis sets: spin-free and spin-orbit. To reduce time a little bit one can change it either to ``SF`` or ``SO``.
  Transformation matrices are taken from :program:`RASSI`. Available options: ``CSF``, ``SF``, ``SO``,
  ``CSF_SF``, ``SF_SO``, ``CSF_SO``, ``ALL``.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="DMBA" APPEAR="DM basis" KIND="CUSTOM" LEVEL="BASIC">
              %%Keyword: DMBAsis <advanced>
              <HELP>
              Density matrix basis.
              </HELP>
              </KEYWORD>

:kword:`TFDM`
  Time step for output of full density matrix. Saving full density matrix
  starts if this keyword is given.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="TFDM" APPEAR="Time step for full density matrix" KIND="REAL" LEVEL="BASIC" DEFAULT_VALUE="1.0" MIN_VALUE="0.0">
              %%Keyword: TFDM <advanced>
              <HELP>
              Time step for output of full density matrix.
              </HELP>
              </KEYWORD>

:kword:`DYSO`
  Flag to switch the ionization.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="DYSO" APPEAR="Enable the ionization" KIND="SINGLE" LEVEL="BASIC">
              %%Keyword: DYSO <advanced>
              <HELP>
              Enable the ionization.
              </HELP>
              </KEYWORD>

:kword:`ALPHa`
  Scaling parameter :math:`\alpha` for the matrix of Dyson amplitudes.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="ALPH" APPEAR="Dyson amplitude scaling parameter" KIND="REAL" LEVEL="BASIC" DEFAULT_VALUE="0.001" MIN_VALUE="0.0">
              %%Keyword: ALPHa <advanced>
              <HELP>
              Scaling parameter for the Dyson amplitudes.
              </HELP>
              </KEYWORD>

:kword:`IONDissipation`
  Free parameter defining how fast ionized states decay.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="IOND" APPEAR="Decay rate of ionized states" KIND="REAL" LEVEL="BASIC" DEFAULT_VALUE="0.0" MIN_VALUE="0.0">
              %%Keyword: IONDissipation <advanced>
              <HELP>
              Decay of ionized states.
              </HELP>
              </KEYWORD>

:kword:`IFDIssipation`
  Flag to switch nuclear dissipation on.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="IFDI" APPEAR="Enable dissipation" KIND="SINGLE" LEVEL="BASIC">
              %%Keyword: IFDIssipation <advanced>
              <HELP>
              Enable dissipation.
              </HELP>
              </KEYWORD>

:kword:`NMODe`
  Number of vibrational mode included. Needed only if :kword:`IFDI` is activated.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="NMOD" APPEAR="Vibrational modes" KIND="INT" LEVEL="BASIC" DEFAULT_VALUE="0" MIN_VALUE="0">
              %%Keyword: NMODe <advanced>
              <HELP>
              Number of vibrational mode included.
              </HELP>
              </KEYWORD>

:kword:`GAMMa`
  Electronic - nuclear bath coupling in :math:`\text{cm}^{-1}`.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="GAMM" APPEAR="Electronic - nuclear bath coupling" KIND="REAL" LEVEL="BASIC" DEFAULT_VALUE="300.0" MIN_VALUE="0.0">
              %%Keyword: GAMMa <advanced>
              <HELP>
              Electronic - nuclear bath coupling.
              </HELP>
              </KEYWORD>

:kword:`HRSO`
  Enables reading of Huang-Ruyis factors in spin-orbit coupling basis.
  By default these are supposed to be in spin-free basis only for
  ground state. See file :file:`HR-FACT`.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="HRSO" APPEAR="Enable reading Huang-Ruyis factors" KIND="SINGLE" LEVEL="BASIC">
              %%Keyword: HRSO <advanced>
              <HELP>
              Enables reading of Huang-Ruyis factors.
              </HELP>
              </KEYWORD>

:kword:`KEXTernal`
  Enables reading the dissipation rate matrix *k* from the file :file:`KEXT`.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="KEXT" APPEAR="External k matrix" KIND="SINGLE" LEVEL="BASIC">
              %%Keyword: KEXTernal <advanced>
              <HELP>
              Enables reading the dissipation rate matrix.
              </HELP>
              </KEYWORD>

:kword:`NPULses`
  Number of incoming electric fields, ``1`` by default. Set it to ``0`` if no pulse is needed.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="NPUL" APPEAR="Incoming pulses" KIND="CUSTOM" LEVEL="BASIC">
              %%Keyword: NPULses <advanced>
              <HELP>
              Number of incoming electric fields.
              </HELP>
              </KEYWORD>

:kword:`PTYPe`
  PTYPE defines form of the shape function for each pulse.
  Electric field is supposed to be in the form :math:`A\vec{e}s(t)\sin{(\Omega(t-t_0)+\varphi_0)}`,
  where :math:`s(t)` is a shape function. Available options are 

  .. container:: list

    **Gauss** --- gaussian shape :math:`\exp (-(t-t_0)^2/(2\sigma^2))`. Set by default.

    **sinX**, **cosX** --- more localized shape :math:`\cos^X(\pi(t-t_0)/(2\sigma))`.
    Here **X** is power, to which sine or cosine functions raise. For example, **sin16** describes 
    :math:`sin^{16}` shape function.

    **Mono** --- monochromatic pulse without shape function.

    **TYPE_X_CIRCLE** --- explicitely circularly polirized light, where *X* can be *L* or 
    *R* for left and right direction, and *TYPE* replaces *Mono* or *Gauss*.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="PTYP" APPEAR="Pulse type" KIND="CUSTOM" LEVEL="BASIC">
              %%Keyword: PTYPe <advanced>
              <HELP>
              Pulse type.
              </HELP>
              </KEYWORD>

:kword:`AMPLitude`
  On one line define as many amplitude values :math:`A` as many pulses you ask for.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="AMPL" APPEAR="Amplitudes" KIND="CUSTOM" LEVEL="BASIC">
              %%Keyword: AMPLitude <advanced>
              <HELP>
              Amplitudes for incoming pulses.
              </HELP>
              </KEYWORD>

:kword:`TAUShift`
  Here should be shifts :math:`t_0` in fs for each pulse in respect to 
  the initial time point.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="TAUS" APPEAR="Shifts of pulse centers" KIND="CUSTOM" LEVEL="BASIC">
              %%Keyword: TAUShift <advanced>
              <HELP>
              Center shift of incoming pulses.
              </HELP>
              </KEYWORD>

:kword:`POLArization`
  Three complex numbers defining polarization :math:`\vec{e}`. By default, electric 
  field is considered to be linear polarized along x-direction. If 
  number of pulses more than one the polarization vector should be 
  given for each on a separate line.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="POLA" APPEAR="Polarizations" KIND="CUSTOM" LEVEL="BASIC">
              %%Keyword: POLArization <advanced>
              <HELP>
              Polarization of incoming pulse.
              </HELP>
              </KEYWORD>

:kword:`SIGMa`
  Pulse dispersion :math:`\sigma` in fs for each pulse. See keyword *PTYPe* for definition.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="SIGM" APPEAR="Widths of pulses" KIND="CUSTOM" LEVEL="BASIC">
              %%Keyword: SIGMa <advanced>
              <HELP>
              Pulse width in fs.
              </HELP>
              </KEYWORD>

:kword:`OMEGa`
  Carrier frequency :math:`\Omega` in eV for each pulse.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="OMEG" APPEAR="Frequencies of pulses" KIND="CUSTOM" LEVEL="BASIC">
              %%Keyword: OMEGa <advanced>
              <HELP>
              Carrier frequency of incoming pulse.
              </HELP>
              </KEYWORD>

:kword:`PHASe`
  Phase :math:`\varphi_0` in radians for each pulse.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="PHAS" APPEAR="Phases for each pulse" KIND="CUSTOM" LEVEL="BASIC">
              %%Keyword: PHASe <advanced>
              <HELP>
              Phase in radians for each pulse.
              </HELP>
              </KEYWORD>

:kword:`CHIRp`
  Enable correction to carrier frequency simulating experimental linear frequency chirp.
  Due to time-dependent phase, the carrier frequency gets additional linear term
  :math:`\Omega \rightarrow \Omega + a (t - t_0)`. 
  Constant :math:`a` should be specified.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="CHIR" APPEAR="Linear chirp constant" KIND="REAL" LEVEL="BASIC">
              %%Keyword: CHIRp <advanced>
              <HELP>
              Linear chirp constant.
              </HELP>
              </KEYWORD>

:kword:`ACORrection`
  Enable correction to electromagnetic pulse as if is given as time derivative of
  a vector potential.

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="ACOR" APPEAR="Vector potential correction" KIND="SINGLE" LEVEL="BASIC">
              %%Keyword: ACORrection <advanced>
              <HELP>
              Vector potential correction.
              </HELP>
              </KEYWORD>

:kword:`DIPOle`
  Activates calculation of mean value of dipole moment, currently is 
  written to file :file:`DIPOLE.dat`

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="DIPO" APPEAR="Calculate dipole moment" KIND="SINGLE" LEVEL="BASIC">
              %%Keyword: DIPOle <advanced>
              <HELP>
              Activates calculation of mean value of dipole moment.
              </HELP>
              </KEYWORD>

:kword:`EMISsion`
  Activates calculation of emission spectra

  .. xmldoc:: <KEYWORD MODULE="RHODYN" NAME="EMIS" APPEAR="Calculate emission spectra" KIND="SINGLE" LEVEL="BASIC">
              %%Keyword: EMISsion <advanced>
              <HELP>
              Activates calculation of emission spectra.
              </HELP>
              </KEYWORD>

Input examples
..............

.. extractfile:: ug/RHODYN.input

  > copy /path/to/file/s3.rasscf.h5  RASSD1
  > copy /path/to/file/s1.rasscf.h5  RASSD2
  > copy /path/to/file/si.rassisd.h5 RASSISD
  > copy /path/to/file/kmatrix.dat   HRFACT

  &RHODYN

  NRSManifolds          = 2
  NRDEt,CSF,STATES,SPIN = 25   25   25   3;
                          30   30   30   1
  NSTAte                = 105 all
  FINAltime             = 10
  IFSO
  AMPLitude             = 9.0
  TAUShift              = 1.
  SIGMa                 = 0.3
  OMEGa                 = 875
  IfDissipation
  KEXTernal

::

  &RHODYN

  NRSManifolds          = 2
  NRDEt,CSF,STATES,SPIN = 25   25   25   3;
                          30   30   30   1
  POPUlatedstyle        = SO_THERMAL
  NSTAte                = 105 all
  FINAltime             = 6
  Tout                  = 0.0005
  METHod                = RKCK
  IFSO
  DMBAsis               = SO
  PROPbasis             = SO
  TFDM                  = 0.005

  PTYPe                 = Gaussian
  NPULses               = 1
  AMPLitude             = 9.0
  TAUShift              = 1.
  POLArization          = (1.0,0.0) (0.0,0.0) (0.0,0.0)
  SIGMa                 = 0.3
  OMEGa                 = 875
  PHASe                 = 0
  Dipole
  Emission

.. xmldoc:: </MODULE>