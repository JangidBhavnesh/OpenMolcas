************************************************************************
* This file is part of OpenMolcas.                                     *
*                                                                      *
* OpenMolcas is free software; you can redistribute it and/or modify   *
* it under the terms of the GNU Lesser General Public License, v. 2.1. *
* OpenMolcas is distributed in the hope that it will be useful, but it *
* is provided "as is" and without any express or implied warranties.   *
* For more details see the full text of the license in the file        *
* LICENSE or in <http://www.gnu.org/licenses/>.                        *
************************************************************************
*************** Variable description ***********************************
*                                                                      *
* Shell is the name of the group of functions which has the same       *
* angular momentum and belong to a given basis sets specification. This*
* shell may reside on a number of different centers.                   *
*                                                                      *
* Observe that this notation sometimes will refer to the list of shells*
* of the basis set and other times to the list of shells of the unique *
* centers.                                                             *
*                                                                      *
* Basis set is a group of shells which has been specified together as  *
* having the same set of unique centers. However, there is nothing     *
* which prevents two or more basis sets to have common centers.        *
*                                                                      *
* Variables:                                                           *
*                                                                      *
* -> Integer   <-                                                      *
*     iSkip : flag to indicate that certain irreps are ignored         *
*     iAngMx: higest angular momentum specified in the input           *
*     nBas  : number of basis functions in each irrep                  *
*     nBas_Aux: number of auxiliary basis functions in each irrep      *
*     MaxPrm: max number of primitives in a shell for a given angular  *
*             momentum                                                 *
*     MaxBas: Dito contracted functions                                *
*     nPrm  : number of primitive functions in each irrep              *
*     MolWgh: integer flag to indicate the normalization of the        *
*             symmetry transformation                                  *
*             0: double coset represetative normalization              *
*             1: as in MOLECULE                                        *
*             2: as in MOLPRO                                          *
*     Mx_Shll: max number of shells defined.                           *
*     nOrdEF: order of electric field operator                         *
*     nBas_Frag:  number of fragment basis functions in each irrep     *
*     iRI_Type: type of RI auxiliary basis set                         *
*     nCtrLD: number of centers in the LDKH procedure                  *
*     iCtrLD: ith center for the LDKH procedure                        *
*                                                                      *
* -> Logical <-                                                        *
*     Onenly: logical flag to indicate that only the 1-electron        *
*             integrals are computed                                   *
*     Test  : logical flag to indicate that the input will only be     *
*             processed                                                *
*     Vlct  : logical flag to indicate that the velocity integrals will*
*             be computed                                              *
*     lOAM  : logical flag to indicate that the orbital angular        *
*             momentum integrals will be computed                      *
*     lOAMc : logical flag to indicate that the orbital angular        *
*             momentum center has been explicitly given                *
*     lOMQ  : logical flag to indicate that the orbital magnetic       *
*             quadrupole integrals will be computed                    *
*     lAMP  : logical flag to indicate that the angular momentum       *
*             product integrals will be computed                       *
*     PrPrt : logical flag to indicate that it is a property           *
*             calculation                                              *
*     Short : logical flag that the short list should be used in the   *
*             output of the property calculation                       *
*     ifallorb : logical flag that properties of all orbitals are      *
*               printed if short=false                                 *
*     lDMS  : logical flag to indicate that the diamagnetic shielding  *
*             integrals should be computed                             *
*     lRel  : logical flag to indicate that the 1-electron Darwin and  *
*             mass-velocity integrals should be computed               *
*     UnNorm: logical flag to indicate that the primitive basis        *
*             functions should not be normalized                       *
*     lSchw : logical flag to indicate that the Cauchy-Schwartz        *
*             inequality should be used in the prescreening            *
*     lXF   : logical flag to indicate presence of an external field   *
*     lAMFI : logical flag for Atomic Mean Field Integrals             *
*     force_part_c: logical flag to force partitioning on contracted   *
*     force_part_p: logical flag to force partitioning on primitive    *
*     GIAO: integrals for first derivative with respect to B           *
*     Cholesky: logical flag for Cholesky decomposition.               *
*     Do_RI: logical flag for RI apporach                              *
*     lFAIEMP: logical flag for Fragment AIEMP                         *
*     Do_FckInt: logical flag for FckInt                               *
*     Do_GuessOrb: logical flag for GuessOrb                           *
*     DiagCheck : logical flag for diagonal ERI check in Cholesky/RI   *
*     LDKroll : logical for the local Douglas-Kroll-Hess               *
*     Do_Numerical_Gradients: force numerical gradients                *
*     VART: Forced variant to translations                             *
*     VARR: Forced variant to rotations                                *
*     EMFR: Electromagnetic field radiation                            *
*     FNMC: finite nuclear mass correction                             *
*                                                                      *
* -> Real*8 <-                                                         *
*     AccMch: approximative relative accuracy of real*8 representation *
*     ThrInt: threshold for writing intgerals to disc                  *
*     PotNuc: the nuclear repulsion energy                             *
*     Sum   : array used for debug purposes                            *
*     SumSq : array used for debug purposes                            *
*     SumAbs: array used for debug purposes                            *
*     CutInt: threshold for ignoring the computation of integrals      *
*     TMass : the total mass of the molecule                           *
*     CoM   : cartesian coordinates of the center of mass              *
*     rMI   : lower triangular form for the moment of inertia tensor   *
*     Prin  : moment of inertia of the principle axis                  *
*     PAx   : vector of the principle axis                             *
*     CoC   : center of charge of the nuclear charges                  *
*     qNuc  : total nuclear charge                                     *
*     PkAcc : packing accuracy                                         *
*     Thrs  : threshold of occupation number of an orbital for which   *
*             orbital contribution to a property will be lised in a    *
*             propert calculation                                      *
*     Dxyz  : coordinates of the gauge origin in the calculation of the*
*             magnetic shielding integrals                             *
*     RadMax: the largest of a contraction coefficient and prefactor   *
*     radiLD: cutoff radius for LDKH procedure                         *
*     KVector: the k-vector of the EMFR                                *
*                                                                      *
************************************************************************
*                                                                      *
#include "Molcas.fh"
*
      Integer, Parameter :: MxFnc=(iTabMx+1)*(iTabMx+2)*(iTabMx+3)/6
*                                                                      *
************************************************************************
*                                                                      *
*     Definitions and common for INTEGER                               *
*                                                                      *
************************************************************************
*                                                                      *
      Integer   iLbls,IntTot,ixStrt,ixEnd,
     &          m2Max,m2Tot,Max_Cnt,MaxDCR,mCentr,MemHid,MolWgh,Mx_AO,
     &          Mx_mdc,Mx_Shll,n2Max,n2Tot,nDim,nIrrep,nMltpl,nOrdEF,
     &          nShlls
      Integer   iSkip(0:7),iAngMx,nBas(0:7),MaxPrm(0:iTabMx),
     &          MaxBas(0:iTabMx),nBas_Aux(0:7),Max_Center,
     &          nPrm(0:7),jMax,iSquar,iPack,iWRopt,
     &          NotZer,nTtl, kCentr, iRelae_Info
      Integer   nBas_Frag(0:7), iOrdFm, nOrd_XF,iXPolType,iRI_Type,
     &          nCtrLD,iCtrLD(10), nPSOI, IsChi
*
      Common /Info/ ixStrt,
     &              Mx_mdc, Mx_Shll,nOrd_XF,iXPolType, nBas_Aux,
     &              iAngMx,  nIrrep, nBas,   n2Tot,
     &              n2Max,   MaxDCR, MaxPrm, MaxBas, nDim,
     &              nOrdEF, mCentr, nPrm,   m2Max,
     &              m2Tot,  IntTot, MemHid, nTtl, Max_Cnt,
     &              nMltpl,  IsChi,  iLbls, nShlls, iPack,
     &              iSquar,  iWRopt, iSkip, NotZer, iRelae_info, jMax,
     &              MolWgh, iOrdFm, iRI_Type,
     &              nBas_Frag,kCentr, Max_Center, Mx_AO,
     &              nCtrLD,iCtrLD, nPSOI,
     &              ixEnd    ! Put never ever anything after ixEnd!!!
*
      Integer          kCnttpPAM, iPAMPrim, iPAMCount
      Common /InfoPAM/ kCnttpPAM, iPAMPrim, iPAMCount
*                                                                      *
************************************************************************
*                                                                      *
*     Definitions and common for LOGICAL                               *
*                                                                      *
************************************************************************
*                                                                      *
      Logical   DirInt, Onenly, Test, Vlct, lOAM, lOAMc,
     &          lOMQ, lAMP, Prprt, Short, ifallorb, lDMS, lRel,
     &          Do_RI, UnNorm, lSchw, lAMFI, force_part_p,
     &          force_part_c, Expert, lXF, BSS,
     &          DKroll, LDKroll, Primitive_Pass,NEMO, GIAO,
     &          Do_GuessOrb, lFAIEMP,Cholesky, Do_FckInt, Align_Only,
     &          Force_Out_of_Core, Do_acCD_Basis, Skip_High_AC,
     &          DoFMM, Cho_OneCenter, LDF, DiagCheck, lRP, lRP_Post,
     &          Fake_ERIs, LocalDF, Do_nacCD_Basis, Do_Align,
     &          Do_Numerical_Gradients, VarT, VarR, EMFR,
     &          lUPONLY, lDOWNONLY, FNMC, lPSOI
      Integer lxStrt, lxEnd
      Common /LInfo/ lxStrt,  ! Put never ever anything before lxStrt!!!
     &               DirInt, DKroll, BSS, Primitive_Pass,  NEMO,
     &               LDF, Do_RI, lAMFI,  Onenly,
     &               Do_GuessOrb, Test, Vlct, lOAM, lOAMc, lOMQ, lAMP,
     &               Prprt, Short, ifallorb, lDMS, lRel, UnNorm,
     &               lSchw, lXF, force_part_c,
     &               force_part_p, Expert, GIAO, Do_FckInt, Cholesky,
     &               lFAIEMP, Force_Out_of_Core,
     &               Do_acCD_Basis, Skip_High_AC, lRP, lRP_Post,
     &               DoFMM, Cho_OneCenter, DiagCheck, LDKroll,
     &               Align_Only, Fake_ERIs, LocalDF, Do_nacCD_Basis,
     &               Do_Align, Do_Numerical_Gradients, VarR, VarT,
     &               EMFR, lUPONLY, lDOWNONLY, FNMC, lPSOI,
     &               lxEnd      ! Put never ever anything after lxEnd!!!
*                                                                      *
************************************************************************
*                                                                      *
*     Definitions and common for REAL*8                                *
*                                                                      *
************************************************************************
*                                                                      *
      Real*8         AccMch, ThrInt,PotNuc, Sum, Rtrnc,
     &               SumSq,  SumAbs, CutInt, TMass,  CoM(3), rMI(6),
     &               Prin(3),PAx(9), CoC(3), qNuc, PkAcc,  Thrs,
     &               Dxyz(3), RadMax , cdMax, EtMax,
     &               E1, E2, Thrshld_CD, RPQMin,SadStep, Delta_RICD,
     &               CLight_Info, radiLD, Shake, KVector(3), ChiI2
      Real*8         rxStrt, rxEnd
      Common /RInfo/ rxStrt,  ! Put never ever anything before rxStrt!!!
     &               AccMch, ThrInt, PotNuc, Sum,
     &               SumSq, SumAbs, CutInt, TMass, CoM, rMI,
     &               Prin, PAx, CoC, qNuc, PkAcc, Thrs,
     &               Dxyz, RadMax, cdMax, EtMax, Rtrnc,
     &               Thrshld_CD, RPQMin, Delta_RICD, CLight_Info,
     &               E1, E2, radiLD, SadStep, Shake, KVector, ChiI2,
     &               rxEnd      ! Put never ever anything after rxEnd!!!
*                                                                      *
************************************************************************
*                                                                      *
*     Definitions and common for CHARACTER                             *
*                                                                      *
************************************************************************
*                                                                      *
      Character LblCBs(MxFnc)*8, LblSBs(MxFnc)*8
      Character Title(10)*80
      Character Align_Weights*512
      Integer cxStrt,cxEnd
*
      Common /CInfo/ cxStrt, !  Put never ever anything before cxStrt!!!
     &               LblCBs, LblSBs, Title, Align_Weights,
     &               cxEnd    !  Put never ever anything after cxEnd!!!
*                                                                      *
************************************************************************
