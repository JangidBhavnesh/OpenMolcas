!***********************************************************************
! This file is part of OpenMolcas.                                     *
!                                                                      *
! OpenMolcas is free software; you can redistribute it and/or modify   *
! it under the terms of the GNU Lesser General Public License, v. 2.1. *
! OpenMolcas is distributed in the hope that it will be useful, but it *
! is provided "as is" and without any express or implied warranties.   *
! For more details see the full text of the license in the file        *
! LICENSE or in <http://www.gnu.org/licenses/>.                        *
!***********************************************************************
!bs
!bs   this include files hold a lot of dimensioning parameters and arrays for
!bs   exponents, contraction coefficients and integrals.
!bs   I hope, most of the names are selfexplaining...
!bs
!bs   All those parameters are constructed to be blown up without any problem
!bs   (if there is sufficient memory) except Lmax which is limited to 4 (g-functions)
!bs
!bs   ###############################################################################
!bs   ################ parameter block ##############################################
!bs   ###############################################################################
      integer Lanz
      parameter (Lanz=Lmax+1)   ! number of angular momenta
!bs   ###############################################################################
!bs   ################ parameter block ##############################################
!bs   ###############################################################################
!bs   overlap of normalized functions
      REAL*8   normovlp,OVLPinv,rootOVLP,rootOVLPinv,scratchinv
      common  /normovl/  normovlp(MxprimL,MxprimL,0:Lmax),              &
     &OVLPinv(MxprimL,MxprimL,0:Lmax),                                  &
     &rootOVLP(MxprimL,MxprimL,0:Lmax),                                 &
     &rootOVLPinv(MxprimL,MxprimL,0:Lmax),                              &
     &scratchinv((MxprimL*MxprimL+MxprimL)/2)
!bs   defining a big array with enough space for all modified contraction coefficients
!bs   for each l-value there are five blocks of size (nprimit(l),ncontrac(l))
!bs   the original contraction coefficients (for normalized functions)
!bs   and four modified blocks  depending on different kinematic factors and included exponents
      real*8 contrarray
      integer iaddori,iaddtyp1,iaddtyp2,iaddtyp3,iaddtyp4
      common /contco/                                                   &
     &contrarray((Lmax+1)*5*MxcontL*MxprimL),                           &
!bs   the following arrays hold the start adresses of the the contraction coefficients for each l-value
     &iaddori(0:Lmax),iaddtyp1(0:Lmax),iaddtyp2(0:Lmax),                &
     &iaddtyp3(0:Lmax),iaddtyp4(0:Lmax)
!bs   the exponents
      real*8 exponents
      common /expo/ exponents(MxprimL,0:Lmax)
!bs   the numbers of primitive and contracted functions for each l-value
      integer nprimit,ncontrac,nprimit_keep,ncontrac_keep
      common /dims/ nprimit(0:Lmax),ncontrac(0:Lmax),nprimit_keep,      &
     &ncontrac_keep
!bs   scratch should explain itself ...........
      real*8 scratch4,cntscrtch
      integer mcombina
      common /scratch_amfi/                                             &
     &scratch4(4*MxprimL*MxprimL),                                      &
     &mcombina(2,-Lmax:Lmax,-Lmax:Lmax,-Lmax:Lmax,-Lmax:Lmax),          &
     &cntscrtch(MxprimL,MxcontL,0:Lmax)
      integer Lfirst,Llast,Lblocks,Lstarter,nblock,Lvalues
      common /contint/                                                  &
     &Lfirst(4),                                                        &
     &Llast(4),Lblocks(4),Lstarter(4),                                  &
     &nblock,Lvalues(4)
!bs   cont4 will keep 4 blocks (label(i)) of structure
!bs      (ncontrac(l1),ncontrac(l2),ncontrac(l3),ncontrac(l4),(Llast(i)-Lfirst(i))/2+1)
!bs                                                               or 0   if no L-value at all
!bs                                                               = Lblocks(i)
!bs   for each l1,l2,l3,l4-block
!bs   Lfirst(i,j) gives the first L-value, for which radial integrals are calculated
!bs   for type i and l1,l2,l3,l4 - Integral block.
!bs   Llast(i,j) gives the last L-value
!bs   Lblocks gives the number of L-values
!bs   Lstarter gives the adress of each integral block on cont4
!bs   the following block contains a lot stuff for calculating the kinematic factors
      real*8 TKIN,evec,eval,Energy,type1,type2
      common /diagonalize/ TKIN(MxprimL*MxprimL),evec(MxprimL*MxprimL), &
     &eval(MxprimL),Energy(MxprimL),type1(MxprimL),type2(MxprimL)
!bs
!bs   some factors that appear a lot of times
!bs   in the angular factors
      real*8 preroots,clebsch
      common /prefs/ preroots(2,0:Lmax),clebsch(3,2,-Lmax:Lmax,0:Lmax)
!bs   common block with the cartesian integrals
      integer mcombcart,istartX,istartY,istartZ,isignM
      common /cartint/                                                  &
     &mcombcart(2,-Lmax:Lmax,-Lmax:Lmax,-Lmax:Lmax,-Lmax:Lmax),         &
     &istartX,istartY,istartZ,                                          &
     &isignM(-Lmax:Lmax)
#include "ipowxyz.fh"
!     common /onepar/ ! one-particle integrals
!    *oneoverR3((MxprimL*MxprimL+MxprimL)/2,Lmax)
!    *onecontr(mxcontL,MxcontL,-Lmax:Lmax,3,Lmax)
!bs   one-electron-integrals:
!bs   1. index: number of first contracted function
!bs   2. index: number of second contracted function
!bs   3. index: pointer(m1,m2)    m1< m2 otherwise change sign of integral
!bs   4. index: L-value
!    *onecartX(mxcontL,MxcontL,
!    *(Lmax+Lmax+1)*(Lmax+1),Lmax),
!    *onecartY(mxcontL,MxcontL,
!    *(Lmax+Lmax+1)*(Lmax+1),Lmax),
!    *onecartZ(mxcontL,MxcontL,
!    *(Lmax+Lmax+1)*(Lmax+1),Lmax)
!bs  powexp holds powers of exponents and meam exponents
!bs  coulovp holds overlap of functions with shifted
!bs  l-values
!     common /coulpow/ coulovlp(MxprimL,MxprimL,-1:1,-1:1,
!    *0:Lmax,0:Lmax)
!    *powexp(MxprimL,MxprimL,0:Lmax,
!    *0:Lmax,0:(Lmax+Lmax+5)),
!bs   express AOs in contracted functions
      real*8 AOcoeffs,occup
      integer noccorb
      common /AOincont/ AOcoeffs(MxcontL,MxcontL,0:Lmax),               &
!bs   first index: number of contracted function
!bs   second index: number of AO
!bs   third index: L-value
     &occup(MxcontL,0:Lmax),noccorb(0:Lmax)
!bs   occupation numbers
!bs   first index: number of AO
!bs   second index: L-value
      integer icore,ikeeporb,ikeeplist,nrtofiperIR
      common /corelist/ icore(0:Lmax),ikeeporb,ikeeplist(Mxcart),       &
     &nrtofiperIR(8)
