C --- Transform vectors for shells in the lists ML[k]
C
C --- Screening based on the Frobenius norm: sqrt(sum_ij A(i,j)^2)
C
C ---  || La,J[k] ||  .le.  || Lab,J || * || Cb[k] ||

                      CALL CWTIME(TCT1,TWT1)

                      Do jDen=1,nDen

                         Do iSh=1,Indx(0,jK_a,jDen)

                            iaSh = Indx(ish,jK_a,jDen)

                            iOffSha = kOffSh(iaSh,lSym)

                            ipLab(iaSh,jDen) = ipChoT + iOffSha*JNUM
     &                                     + (jDen-1)*nBas(lSym)*JNUM

                            ibcount=0

                            Do ibSh=1,nShell

                               iOffShb = kOffSh(ibSh,kSym)

                               iShp = iTri(iaSh,ibSh)

                               If (iShp_rs(iShp)<=0) Cycle

                               If(nnBstRSh(JSym,iShp_rs(iShp),iLoc)*
     &                             nBasSh(lSym,iaSh)*
     &                             nBasSh(kSym,ibSh) .gt. 0
     &                        .and. sqrt(abs(SumAClk(ibSh,jk_a,jDen)*
     &                        SvShp(iShp_rs(iShp)) )) .ge. thrv )Then

                                 ibcount = ibcount + 1


                                 IF (lSym.ge.kSym) Then

                                    jOff = iOffShp(lSym,iShp_rs(iShp))
                                    If (iaSh<ibSh) jOff = jOff +
     &                              nBasSh(lSym,ibSh)*nBasSh(kSym,iaSh)


C ---  LaJ,[k] = sum_b  L(aJ,b) * C(b)[k]
C ---------------------------------------
                                    Mode(1:1)='N'
                                    n1 = nBasSh(lSym,iaSh)*JNUM
                                    n2 = nBasSh(kSym,ibSh)

                                 Else   ! lSym < kSym

                                   jOff = iOffShp(kSym,iShp_rs(iShp))
                                   If (ibSh<iaSh) jOff = jOff +
     &                             nBasSh(kSym,iaSh)*nBasSh(lSym,ibSh)


C ---  LJa,[k] = sum_b  L(b,Ja) * C(b)[k]
C ---------------------------------------
                                    Mode(1:1)='T'
                                    n1 = nBasSh(kSym,ibSh)
                                    n2 = JNUM*nBasSh(lSym,iaSh)

                                EndIf

                                CALL DGEMV_(Mode(1:1),n1,n2,
     &                                ONE,Work(ipLF+jOff*JNUM),n1,
     &                                    Work(ipMO(jDen)+ioffShb),1,
     &                                ONE,Work(ipLab(iaSh,jDen)),1)

                                EndIf

                            End Do ! ibsh

c --- The following re-assignement is used later on to check if the
c --- iaSh vector LaJ[k] can be neglected because identically zero

                            If (ibcount==0) ipLab(iash,jDen) = ipAbs

                         End Do ! iSh

                      End Do ! jDen

                      CALL CWTIME(TCT2,TWT2)
                      tmotr(1) = tmotr(1) + (TCT2 - TCT1)
                      tmotr(2) = tmotr(2) + (TWT2 - TWT1)

C --- Prepare the J-screening

                      CALL CWTIME(TCS1,TWS1)

                      Do iSh=1,Indx(0,jK_a,1)

                         iaSh = Indx(iSh,jK_a,1)

                         iaSkip=Min(1,Max(0,
     &                          abs(ipLab(iaSh,1)-ipAbs))) ! = 1 or 0

                         jaSkip=Min(1,Max(0,
     &                          abs(ipLab(iaSh,kDen)-ipAbs)))

                         If (iaSkip*jaSkip==0) Cycle

                         IF (lSym.ge.kSym) Then

C ---  Faa,[k] = sum_J  LaJ[k1]*LaJ[k2]
C -------------------------------------
                            Inc=nBasSh(lSym,iaSh)
                            n1 = 1

                         Else   ! lSym < kSym

C ---  Faa,[k] = sum_J  LJa[k1]*LJa[k2]
C -------------------------------------
                            Inc=1
                            n1 = JNUM

                         End If

                         Tmp=Zero
                         Do ia=1,nBasSh(lSym,iaSh)
                            ipLai = ipLab(iaSh,   1) + n1*(ia-1)
                            ipLaj = ipLab(iaSh,kDen) + n1*(ia-1)
                            Fia(ia)=DDot_(JNUM,Work(ipLai),Inc,
     &                                         Work(ipLaj),Inc)
                            Tmp=Max(Abs(Fia(ia)),Tmp)
                         End Do

                         Faa(iaSh)=Tmp

                      End Do
